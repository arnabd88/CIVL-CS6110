/*****************************************************************************
* SOURCE: This is a translation of a Pthread program from the Lawrence Livermore
* Computing Center POSIX Threads Programming Exercise at:
* https://computing.llnl.gov/tutorials/pthreads/exercise.html
* SUPERSOURCE: Adapted from example code in "Pthreads Programming", B. Nichols
*   et al. O'Reilly and Associates.
* FILE: bug1fix.cvl
* DESCRIPTION:
*  	Solution for the bug1.cvl program.  The inc_count routine uses a
*   pthread_cond_broadcast() routine instead of the pthread_cond_signal()
*   routine.
* Command line execution:
* civl verify -inputNUM_THREADS=6 -inputTCOUNT=10 -inputCOUNT_LIMIT=12 bug1fix.cvl
******************************************************************************/

#include "pthread.h"
#include <civlc.h>
#include <stdio.h>
#include <stdlib.h>
#include "math.cvh"

$input int NUM_THREADS; //Changed definitions to input variables
$input int TCOUNT;
$input int COUNT_LIMIT;

int count = 0;
pthread_mutex_t count_mutex;
pthread_cond_t count_threshold_cv;

void *inc_count(void *idp) 
{
  int j,i;
  double result=0.0;
  long my_id = (long)*idp; //Changed to dereference, can't directly convert from void* to long
  
  for (i=0; i < TCOUNT; i++) {
    pthread_mutex_lock(&count_mutex);
    count++;

    /* 
    Check the value of count and signal waiting thread when condition is
    reached.  Note that this occurs while mutex is locked. 
    */
    if (count == COUNT_LIMIT) {
      pthread_cond_broadcast(&count_threshold_cv);
      // Removed l from %ld, unsupported
      printf("inc_count(): thread %d, count = %d  Threshold reached.\n", my_id, count);
    }
    // Removed l from %ld, unsupported
    printf("inc_count(): thread %d, count = %d, unlocking mutex\n", my_id, count);
    pthread_mutex_unlock(&count_mutex);

    /* Do some work so threads can alternate on mutex lock */
    //sleep(1); Removed sleep, unnecessary
  pthread_exit(NULL, false, NULL, 0);
}

void *watch_count(void *idp) 
{
  long my_id = (long)*idp;

  // Removed l from %ld, unsupported
  printf("Starting watch_count(): thread %d\n", my_id);

  /*
  Lock mutex and wait for signal.  Note that the pthread_cond_wait routine
  will automatically and atomically unlock mutex while it waits. 
  Also, note that if COUNT_LIMIT is reached before this routine is run by
  the waiting thread, the loop will be skipped to prevent pthread_cond_wait
  from never returning.
  */
  pthread_mutex_lock(&count_mutex);
  printf("***Before cond_wait: thread %d\n", my_id); // Removed l from %ld, unsupported
  pthread_cond_wait(&count_threshold_cv, &count_mutex);
  printf("***Thread %d Condition signal received.\n", my_id); // Removed l from %ld, unsupported
  pthread_mutex_unlock(&count_mutex);
  pthread_exit(NULL, false, NULL, 0); //Different parameters
}

int main(void)
{
  int i, rc;
  pthread_t threads[6];
  pthread_attr_t attr;

  /* Initialize mutex and condition variable objects */
  pthread_mutex_init(&count_mutex, NULL);
  pthread_cond_init (&count_threshold_cv, NULL);

  /*
  For portability, explicitly create threads in a joinable state 
  Created variables for casting as we are unable to currently cast raw integer values as
  void pointers.
  */
  int zero = 0;
  int one = 1;
  int two = 2;
  int three = 3;
  int four = 4;
  int five = 5;
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
  pthread_create(&threads[2], &attr, watch_count, (void *)&two);
  pthread_create(&threads[3], &attr, watch_count, (void *)&three);
  pthread_create(&threads[4], &attr, watch_count, (void *)&four);
  pthread_create(&threads[5], &attr, watch_count, (void *)&five);
  pthread_create(&threads[0], &attr, inc_count, (void *)&zero);
  pthread_create(&threads[1], &attr, inc_count, (void *)&one);

  /* Wait for all threads to complete*/ 
  for (i = 0; i < NUM_THREADS; i++) {
    pthread_join(threads[i], NULL);
  }
  
  printf ("Main(): Waited on %d  threads. Done.\n", NUM_THREADS);

  /* Clean up and exit */
  pthread_attr_destroy(&attr);
  pthread_mutex_destroy(&count_mutex);
  pthread_cond_destroy(&count_threshold_cv);
  pthread_exit(NULL, true, NULL, 0); //Different parameters

}

