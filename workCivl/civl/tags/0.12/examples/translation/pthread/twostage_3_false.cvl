/*****************************************************************************
* SOURCE: This is a translation of a Pthread program from 
* the Pthread benchmarks of SV-COMP 2014.
* https://svn.sosy-lab.org/software/sv-benchmarks/tags/svcomp14/
* FILE: twostage_3_false.cvl
* DESCRIPTION: This program checks for errors in mutex initialization as well
* as thread creation, then creates a mutex error by attempting to unlock an
* unlocked mutex
* Command line execution:
* civl verify twostage_3_false.cvl
******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "pthread.h"
#include <civlc.h>
//#include <assert.h>

//#define USAGE "./twostage <param1> <param2>\n"

static int iTThreads = 2;
static int iRThreads = 1;
static int data1Value = 0;
static int data2Value = 0;
pthread_mutex_t *data1Lock;
pthread_mutex_t *data2Lock;

//void lock(pthread_mutex_t *);
//void unlock(pthread_mutex_t *);

void *funcA(void *param) 
{
  pthread_mutex_lock(data1Lock);
  data1Value = 1;
  pthread_mutex_unlock(data1Lock);

  pthread_mutex_lock(data2Lock);
  data2Value = data1Value + 1;
  pthread_mutex_unlock(data2Lock);
  pthread_exit(NULL, false, NULL, 0); //Should be here
}

void *funcB(void *param) 
{
  int t1 = -1;
  int t2 = -1;

  pthread_mutex_lock(data1Lock);
  if (data1Value == 0) {
    pthread_mutex_unlock(data1Lock);
  }
  t1 = data1Value;
  pthread_mutex_unlock(data1Lock);

  pthread_mutex_lock(data2Lock);
  t2 = data2Value;
  pthread_mutex_unlock(data2Lock);

  if (t2 != (t1 + 1)) {
    $assert($false, "Bug found!\n");
  }
  pthread_exit(NULL, false, NULL, 0); //Should be here
}

int main(void) 
{
  int i,err;
  
  //Unnecessary
  /*
  if (argc != 1) {
    if (argc != 3) {
      fprintf(stderr, USAGE);
      exit(-1);
    } 
    else {
      sscanf(argv[1], "%d", &iTThreads);
      sscanf(argv[2], "%d", &iRThreads);
    }
  }
  */

  data1Lock = (pthread_mutex_t *) malloc(sizeof(pthread_mutex_t));
  data2Lock = (pthread_mutex_t *) malloc(sizeof(pthread_mutex_t));
    
  if (0 != (err = pthread_mutex_init(data1Lock, NULL))) {
    $assert($false, "pthread_mutex_init error: %d\n", err);
    return -1;
  }
    
  if (0 != (err = pthread_mutex_init(data2Lock, NULL))) {
    $assert($false, "pthread_mutex_init error: %d\n", err);
    return -1;
  }
   
  pthread_t tPool[iTThreads];
  pthread_t rPool[iRThreads];
    
  for (i = 0; i < iTThreads; i++) {
    err = pthread_create(&tPool[i], NULL, funcA, NULL);
    if (err != 0) {
      $assert($false, "Error found creating 2stage thread.\n", err);
      return -1;
    }
  }
    
  for (i = 0; i < iRThreads; i++) {
    if (0 != (err = pthread_create(&rPool[i], NULL, funcB, NULL))) {
      $assert($false, "Error found creating read thread.\n", err);
      return -1;
    }
  }

  for (i = 0; i < iTThreads; i++) {
    if (0 != (err = pthread_join(tPool[i], NULL))) {
      $assert($false, "pthread join error: %d\n", err);
      return -1;
    }
  }

  for (i = 0; i < iRThreads; i++) {
    if (0 != (err = pthread_join(rPool[i], NULL))) {
      $assert($false, "pthread join error: %d\n", err);
      return -1;
    }
  }
    
  return 0;
}

void lock(pthread_mutex_t *lock) 
{
  int err;
  
  if (0 != (err = pthread_mutex_lock(lock))) {
    $assert($false, "Got error %d from pthread_mutex_lock.\n", err);
  }
}

void unlock(pthread_mutex_t *lock) 
{
  int err;
  
  if (0 != (err = pthread_mutex_unlock(lock))) {
    $assert($false, "Got error %d from pthread_mutex_unlock.\n", err);
  }
}
